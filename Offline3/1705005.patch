diff --git a/Makefile b/Makefile
index 09d790c..0f0cad2 100644
--- a/Makefile
+++ b/Makefile
@@ -181,6 +181,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_test\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -217,7 +218,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
@@ -251,6 +252,7 @@ EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
 	printf.c umalloc.c\
+	test.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff --git a/defs.h b/defs.h
index 82fb982..fca45b9 100644
--- a/defs.h
+++ b/defs.h
@@ -9,6 +9,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -120,6 +121,7 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int             populate_ps(struct pstat*);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/proc.c b/proc.c
index 806b1b1..e86bd91 100644
--- a/proc.c
+++ b/proc.c
@@ -6,6 +6,49 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "pstat.h"
+
+static unsigned random_seed = 1;
+
+#define RANDOM_MAX ((1u << 31u) - 1u)
+unsigned lcg_parkmiller(unsigned *state)
+{
+    const unsigned N = 0x7fffffff;
+    const unsigned G = 48271u;
+
+    /*  
+        Indirectly compute state*G%N.
+
+        Let:
+          div = state/(N/G)
+          rem = state%(N/G)
+
+        Then:
+          rem + div*(N/G) == state
+          rem*G + div*(N/G)*G == state*G
+
+        Now:
+          div*(N/G)*G == div*(N - N%G) === -div*(N%G)  (mod N)
+
+        Therefore:
+          rem*G - div*(N%G) === state*G  (mod N)
+
+        Add N if necessary so that the result is between 1 and N-1.
+    */
+    unsigned div = *state / (N / G);  /* max : 2,147,483,646 / 44,488 = 48,271 */
+    unsigned rem = *state % (N / G);  /* max : 2,147,483,646 % 44,488 = 44,487 */
+
+    unsigned a = rem * G;        /* max : 44,487 * 48,271 = 2,147,431,977 */
+    unsigned b = div * (N % G);  /* max : 48,271 * 3,399 = 164,073,129 */
+
+    return *state = (a > b) ? (a - b) : (a + (N - b));
+}
+
+unsigned next_random(int total) {
+    //cprintf("total : %d\n", total);
+    if(total == 0 ) return 0;
+    return lcg_parkmiller(&random_seed) % total;
+}
 
 struct {
   struct spinlock lock;
@@ -65,6 +108,9 @@ myproc(void) {
   return p;
 }
 
+
+
+
 //PAGEBREAK: 32
 // Look in the process table for an UNUSED proc.
 // If found, change state to EMBRYO and initialize
@@ -88,6 +134,9 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->tickets = 1;
+  p->ticks = 0;
+  
 
   release(&ptable.lock);
 
@@ -196,6 +245,8 @@ fork(void)
     np->state = UNUSED;
     return -1;
   }
+  np->tickets = curproc->tickets;
+  np->ticks = 0;
   np->sz = curproc->sz;
   np->parent = curproc;
   *np->tf = *curproc->tf;
@@ -332,23 +383,47 @@ scheduler(void)
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    int total = 0;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){ 
+      if(p->state == RUNNABLE){
+        total += p->tickets;
+      }
+    }
+    int ticket_count = 0;
+    
+
+    int lottery = next_random(total);
+  
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){ 
       if(p->state != RUNNABLE)
         continue;
-
+      ticket_count += p->tickets;
+      if(lottery >= ticket_count){
+        continue;
+      }
+      
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
+      // cprintf("ticks %d\n", ticks);
+      const int start = ticks;
+      
+
       c->proc = p;
+      // switches to process's page table
       switchuvm(p);
       p->state = RUNNING;
 
       swtch(&(c->scheduler), p->context);
+      // count ticks
+      p->ticks += ticks - start;
+
       switchkvm();
 
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       c->proc = 0;
+      break;
     }
     release(&ptable.lock);
 
@@ -532,3 +607,28 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+
+int populate_ps(struct pstat* ps){
+  struct proc *p;
+  //char *sp;
+  int i = 0;
+
+  acquire(&ptable.lock);
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+  {
+      ps->inuse[i] = 0;
+      if(p->state != UNUSED){
+        ps->inuse[i] = 1;
+      }
+      ps->pid[i] = p->pid;
+      ps->tickets[i] = p->tickets;
+      ps->ticks[i] = p->ticks;
+      i = i + 1;
+  }
+
+  release(&ptable.lock);
+  return 0;
+}
+
diff --git a/proc.h b/proc.h
index 1647114..a4d7f62 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int tickets;
+  int ticks;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/pstat.h b/pstat.h
new file mode 100644
index 0000000..aa89a2d
--- /dev/null
+++ b/pstat.h
@@ -0,0 +1,22 @@
+#ifndef _PSTAT_H_
+
+#define _PSTAT_H_
+
+
+#include "param.h"
+
+
+struct pstat {
+
+  int inuse[NPROC];   // whether this slot of the process table is in use (1 or 0)
+
+  int tickets[NPROC]; // the number of tickets this process has
+
+  int pid[NPROC];     // the PID of each process
+
+  int ticks[NPROC];   // the number of ticks each process has accumulated
+
+};
+
+
+#endif // _PSTAT_H_
\ No newline at end of file
diff --git a/syscall.c b/syscall.c
index ee85261..8af82a5 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,8 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_settickets(void);
+extern int sys_getpinfo(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +128,8 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo]  sys_getpinfo,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..7926b7f 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
diff --git a/sysproc.c b/sysproc.c
index 0686d29..763f977 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -6,6 +6,8 @@
 #include "memlayout.h"
 #include "mmu.h"
 #include "proc.h"
+#include "pstat.h"
+
 
 int
 sys_fork(void)
@@ -89,3 +91,24 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int sys_settickets(void){
+  int number;
+  argint(0, &number);
+  if(number < 1) return -1;
+  myproc()->tickets = number;
+  return 0;
+}
+
+int sys_getpinfo(void){
+  struct pstat *temp;
+  int check = argptr (0 , (void*)&temp ,sizeof(*temp));
+  if(check == -1){
+    return -1;
+  }
+
+  populate_ps( temp ); 
+  //cprintf("Hello Shesh \n"); 
+  return 0;
+}
+
diff --git a/test.c b/test.c
new file mode 100644
index 0000000..833f85c
--- /dev/null
+++ b/test.c
@@ -0,0 +1,22 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "pstat.h"
+
+int
+main(int argc, char *argv[])
+{
+    struct pstat* ps = malloc (sizeof(struct pstat));;
+    settickets(20);
+    sleep(10);
+    getpinfo(ps);
+    
+    int length = sizeof(ps->pid)/sizeof(ps->pid[0]);
+    int i;
+    for(i = 0 ; i < length ; i++){
+        printf(1, "%d : inuse : %d , pid : %d , tickets : %d , ticks : %d\n", i, ps->inuse[i], ps->pid[i], ps->tickets[i], ps->ticks[i]);
+    }
+    
+    exit();
+    return 0;
+}
\ No newline at end of file
diff --git a/user.h b/user.h
index 4f99c52..c9f9009 100644
--- a/user.h
+++ b/user.h
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -23,6 +24,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat *);
+
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..0b55e5e 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,6 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(settickets)
+SYSCALL(getpinfo)
+
